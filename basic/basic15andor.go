package main

import "fmt"

var p = func(s interface{}) {
	fmt.Printf("%#v\n", s)
}

/*
 & ビット演算する。
 10進数をビット演算する場合、まず計算対象を２進数で表す。
 計算対象を並べ、両方とも1の部分を1、それ以外を0に置き換えて2進数を作り、結果を10進数に変換して返す。
 左右の計算対象を入れ替えても同じ結果になる。
 ビットクリアはx and (not y)を一度に行うもの。
 同じ数字でビットクリアすると0になる。
 */
func main() {
	p(165&155) // 129

	// 165   1010 0101
	// 155   1001 1011
	//---------------------
	//       1000 0001 => 10進数に変換すると129

	p(165|155) // 191
	// 165   1010 0101
	// 155   1001 1011
	//---------------------
	//       1011 1111 => 191

	p(165^155) // 62
	// 165   1010 0101
	// 155   1001 1011
	//---------------------
	//       0011 1110 =>

	// ビットクリア
	p(165&^155) // 36
	// 165   1010 0101
	// 155   1001 1011
	//---------------------
	//       0011 1110 =>

	p(1&^1)     // 0
	p(255&^255) // 0

	// ^でNOTを表す。
	p(int(^uint8(13))) // 16進数の最大値から値を引いた値が返る
	p(int(^uint8(20)))
}
