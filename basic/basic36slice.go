package main

import "fmt"

var p = func(s []int) {
	fmt.Printf("len=%d, cap=%d, %#v \n", len(s), cap(s), s)
}

/*
配列から生成したスライスは、生成直後は元の配列を参照している。
スライスの内部の値を変更すると、配列の値も変わってしまう。

配列から生成したスライスが元の配列と同じメモリを参照しているかどうかは、
スライスを拡張するように操作したかどうかで変わる。

appendでスライスが自動拡張されたタイミングで、
参照が元の配列をコピーした別のメモリ領域をさすようになる。
コピーした後のスライスの要素を変更しても、元の配列には影響しない。
 */
func main() {
	a := [5]int{1,2,3,4,5}

	b := a[0:2]

	p(b)

	b[1] = 0
	p(b) // []int{1, 0}
	fmt.Println(a) // [1 0 3 4 5]


	// appendでスライスが自動拡張されたタイミングで、
	// 参照が元の配列をコピーした別のメモリ領域をさすようになる。
	// コピーした後のスライスの要素を変更しても、元の配列には影響しない。
	s := a[:]
	p(s)

	s = append(s, 6,7,8,9,10)
	p(s)
	fmt.Println(a) // [1 0 3 4 5]

	s[0] = 0
	p(s) //[]int{0, 0, 3, 4, 5, 6, 7, 8, 9, 10}
	fmt.Println(a) // [1 0 3 4 5]
}
